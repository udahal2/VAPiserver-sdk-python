# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .create_customer_dto import CreateCustomerDto
import pydantic
import typing_extensions
from .schedule_plan import SchedulePlan
from ..core.serialization import FieldMetadata
from .create_assistant_dto import CreateAssistantDto
from .assistant_overrides import AssistantOverrides
from .create_squad_dto import CreateSquadDto
from .import_twilio_phone_number_dto import ImportTwilioPhoneNumberDto
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CreateOutboundCallDto(UncheckedBaseModel):
    customers: typing.Optional[typing.List[CreateCustomerDto]] = pydantic.Field(default=None)
    """
    This is used to issue batch calls to multiple customers.
    
    Only relevant for `outboundPhoneCall`. To call a single customer, use `customer` instead.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of the call. This is just for your own reference.
    """

    schedule_plan: typing_extensions.Annotated[typing.Optional[SchedulePlan], FieldMetadata(alias="schedulePlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the schedule plan of the call.
    """

    transport: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    This is the transport of the call.
    """

    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.
    """

    assistant: typing.Optional[CreateAssistantDto] = pydantic.Field(default=None)
    """
    This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.
    """

    assistant_overrides: typing_extensions.Annotated[
        typing.Optional[AssistantOverrides], FieldMetadata(alias="assistantOverrides")
    ] = pydantic.Field(default=None)
    """
    These are the overrides for the `assistant` or `assistantId`'s settings and template variables.
    """

    squad_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="squadId")] = pydantic.Field(
        default=None
    )
    """
    This is the squad that will be used for the call. To use a transient squad, use `squad` instead.
    """

    squad: typing.Optional[CreateSquadDto] = pydantic.Field(default=None)
    """
    This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.
    """

    phone_number_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="phoneNumberId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    phone_number: typing_extensions.Annotated[
        typing.Optional[ImportTwilioPhoneNumberDto], FieldMetadata(alias="phoneNumber")
    ] = pydantic.Field(default=None)
    """
    This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    customer_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="customerId")] = pydantic.Field(
        default=None
    )
    """
    This is the customer that will be called. To call a transient customer , use `customer` instead.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    customer: typing.Optional[CreateCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer that will be called. To call an existing customer, use `customerId` instead.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
